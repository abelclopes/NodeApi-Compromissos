/**
 * API Legislação
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

import {MEAT_API} from '../../app.api'

@Injectable()
export class CompromissosApi {

    protected basePath = '';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();
    Url: string
    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.Url = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        this.Url = `${MEAT_API}`
    }

    /**
     *
     * @param CompromissoId
     * @param id
     */
    public apiCompromissosByCompromissoIdDelete(compromissoId: string, extraHttpRequestParams?: any): Observable<models.CompromissosModel> {
        return this.apiCompromissosByCompromissoIdDeleteWithHttpInfo(compromissoId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @param CompromissoId
     */
    public apiCompromissosByCompromissoIdGet(CompromissoId: string, extraHttpRequestParams?: any): Observable<models.CompromissosModel> {
        return this.apiCompromissosByCompromissoIdGetWithHttpInfo(CompromissoId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @param CompromissoId
     * @param login
     */
    public apiCompromissosByCompromissoIdPut(compromisso_id: string, compromisso: models.CompromissosModel, extraHttpRequestParams?: any): Observable<models.CompromissosModel> {
        return this.apiCompromissosByCompromissoIdPutWithHttpInfo(compromisso_id, compromisso, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @param numeroPagina
     * @param tamanhoPagina
     */
    public apiCompromissosGet(numeroPagina?: number, tamanhoPagina?: number, extraHttpRequestParams?: any): Observable<models.ListaPaginadaCompromissosModel> {
        return this.apiCompromissosGetWithHttpInfo(numeroPagina, tamanhoPagina, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     *
     * @param login
     */
    public apiCompromissosPost(compromisso?: models.CompromissosModel, extraHttpRequestParams?: any): Observable<models.CompromissosModel> {
        return this.apiCompromissosPostWithHttpInfo(compromisso, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     *
     *
     * @param CompromissoId
     * @param id
     */
    public apiCompromissosByCompromissoIdDeleteWithHttpInfo(CompromissoId: string, id?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.Url + '/api/Compromissos/${CompromissoId}'
                    .replace('${' + 'CompromissoId' + '}', String(CompromissoId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'CompromissoId' is not null or undefined
        if (CompromissoId === null || CompromissoId === undefined) {
            throw new Error('Required parameter CompromissoId was null or undefined when calling apiCompromissosByCompromissoIdDelete.');
        }
        if (id !== undefined) {
            queryParameters.set('id', <any>id);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     *
     *
     * @param CompromissoId
     */
    public apiCompromissosByCompromissoIdGetWithHttpInfo(CompromissoId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.Url + '/api/Compromissos/${CompromissoId}'
                    .replace('${' + 'CompromissoId' + '}', String(CompromissoId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON());
        // verify required parameter 'CompromissoId' is not null or undefined
        if (CompromissoId === null || CompromissoId === undefined) {
            throw new Error('Required parameter CompromissoId was null or undefined when calling apiCompromissosByCompromissoIdGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });

        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     *
     *
     * @param CompromissoId
     * @param login
     */
    public apiCompromissosByCompromissoIdPutWithHttpInfo(compromissoId: string, compromisso: models.CompromissosModel, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.Url + '/api/Compromissos/${CompromissoId}'
                    .replace('${' + 'CompromissoId' + '}', String(compromissoId));
        let queryParameters = new URLSearchParams();
      //  let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'idGrupo' is not null or undefined
        if (compromissoId === null || compromissoId === undefined)
           throw new Error('Required parameter idGrupo was null or undefined when calling apiGruposByIdGrupoPut.');

           let headers = new Headers(
           {
               'Content-Type': 'application/json'
           });

        let requestOptions: RequestOptionsArgs = new RequestOptions({
           method: RequestMethod.Put,
           headers: headers,
           body: JSON.stringify(compromisso)
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
           requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     *
     *
     * @param numeroPagina
     * @param tamanhoPagina
     */
    public apiCompromissosGetWithHttpInfo(numeroPagina?: number, tamanhoPagina?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.Url + `/api/Compromissos/${numeroPagina}/${tamanhoPagina}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON());


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     *
     *
     * @param login
     */
    public apiCompromissosPostWithHttpInfo(compromisso?: models.CompromissosModel, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.Url + '/api/Compromissos';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(
        {
            'Content-Type': 'application/json'
        });


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: JSON.stringify(compromisso)
        });

        return this.http.request(path, requestOptions);
    }

}
